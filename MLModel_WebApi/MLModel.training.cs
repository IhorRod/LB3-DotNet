﻿// This file was auto-generated by ML.NET Model Builder. 
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.ML.Data;
using Microsoft.ML.Trainers;
using Microsoft.ML;

namespace MLModel_WebApi
{
    public partial class MLModel
    {
        /// <summary>
        /// Retrains model using the pipeline generated as part of the training process. For more information on how to load data, see aka.ms/loaddata.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <param name="trainData"></param>
        /// <returns></returns>
        public static ITransformer RetrainPipeline(MLContext mlContext, IDataView trainData)
        {
            var pipeline = BuildPipeline(mlContext);
            var model = pipeline.Fit(trainData);

            return model;
        }

        /// <summary>
        /// build the pipeline that is used from model builder. Use this function to retrain model.
        /// </summary>
        /// <param name="mlContext"></param>
        /// <returns></returns>
        public static IEstimator<ITransformer> BuildPipeline(MLContext mlContext)
        {
            // Data process configuration with pipeline data transformations
            var pipeline = mlContext.Transforms.ReplaceMissingValues(@"column1", @"column1")      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"country",outputColumnName:@"country"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"description",outputColumnName:@"description"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"points",outputColumnName:@"points"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"price",outputColumnName:@"price"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"province",outputColumnName:@"province"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"region_1",outputColumnName:@"region_1"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"region_2",outputColumnName:@"region_2"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"variety",outputColumnName:@"variety"))      
                                    .Append(mlContext.Transforms.Text.FeaturizeText(inputColumnName:@"winery",outputColumnName:@"winery"))      
                                    .Append(mlContext.Transforms.Concatenate(@"Features", new []{@"column1",@"country",@"description",@"points",@"price",@"province",@"region_1",@"region_2",@"variety",@"winery"}))      
                                    .Append(mlContext.Transforms.Conversion.MapValueToKey(outputColumnName:@"designation",inputColumnName:@"designation"))      
                                    .Append(mlContext.Transforms.NormalizeMinMax(@"Features", @"Features"))      
                                    .Append(mlContext.MulticlassClassification.Trainers.SdcaMaximumEntropy(new SdcaMaximumEntropyMulticlassTrainer.Options(){L1Regularization=1F,L2Regularization=0.1F,LabelColumnName=@"designation",FeatureColumnName=@"Features"}))      
                                    .Append(mlContext.Transforms.Conversion.MapKeyToValue(outputColumnName:@"PredictedLabel",inputColumnName:@"PredictedLabel"));

            return pipeline;
        }
    }
}
